{"ast":null,"code":"/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nimport * as React from 'react';\nimport { invariant } from '@formatjs/intl-utils';\nimport { assignUniqueKeysToParts } from '../utils';\nimport IntlMessageFormat, { isFormatXMLElementFn } from 'intl-messageformat';\nimport { MissingTranslationError, MessageFormatError } from '../error';\n\nfunction setTimeZoneInOptions(opts, timeZone) {\n  return Object.keys(opts).reduce(function (all, k) {\n    all[k] = __assign({\n      timeZone: timeZone\n    }, opts[k]);\n    return all;\n  }, {});\n}\n\nfunction deepMergeOptions(opts1, opts2) {\n  var keys = Object.keys(__assign(__assign({}, opts1), opts2));\n  return keys.reduce(function (all, k) {\n    all[k] = __assign(__assign({}, opts1[k] || {}), opts2[k] || {});\n    return all;\n  }, {});\n}\n\nfunction deepMergeFormatsAndSetTimeZone(f1, timeZone) {\n  if (!timeZone) {\n    return f1;\n  }\n\n  var mfFormats = IntlMessageFormat.formats;\n  return __assign(__assign(__assign({}, mfFormats), f1), {\n    date: deepMergeOptions(setTimeZoneInOptions(mfFormats.date, timeZone), setTimeZoneInOptions(f1.date || {}, timeZone)),\n    time: deepMergeOptions(setTimeZoneInOptions(mfFormats.time, timeZone), setTimeZoneInOptions(f1.time || {}, timeZone))\n  });\n}\n\nexport function assignUniqueKeysToFormatXMLElementFnArgument(values) {\n  return Object.keys(values).reduce(function (acc, k) {\n    var v = values[k];\n    acc[k] = isFormatXMLElementFn(v) ? assignUniqueKeysToParts(v) : v;\n    return acc;\n  }, {});\n}\n\nfunction prepareIntlMessageFormatHtmlOutput(chunks, shouldWrap) {\n  return Array.isArray(chunks) && shouldWrap ? React.createElement.apply(React, __spreadArrays([React.Fragment, null], chunks)) : chunks;\n}\n\nexport function formatMessage(_a, state, messageDescriptor, values) {\n  var locale = _a.locale,\n      formats = _a.formats,\n      messages = _a.messages,\n      defaultLocale = _a.defaultLocale,\n      defaultFormats = _a.defaultFormats,\n      onError = _a.onError,\n      timeZone = _a.timeZone,\n      wrapRichTextChunksInFragment = _a.wrapRichTextChunksInFragment;\n\n  if (messageDescriptor === void 0) {\n    messageDescriptor = {\n      id: ''\n    };\n  }\n\n  var id = messageDescriptor.id,\n      defaultMessage = messageDescriptor.defaultMessage; // `id` is a required field of a Message Descriptor.\n\n  invariant(!!id, '[React Intl] An `id` must be provided to format a message.');\n  var message = messages && messages[String(id)]; // IMPORTANT: Hot path straight lookup for performance\n\n  if (!values && message && typeof message === 'string') {\n    return message.replace(/'\\{(.*?)\\}'/gi, \"{$1}\");\n  }\n\n  var patchedValues = values && assignUniqueKeysToFormatXMLElementFnArgument(values);\n  formats = deepMergeFormatsAndSetTimeZone(formats, timeZone);\n  defaultFormats = deepMergeFormatsAndSetTimeZone(defaultFormats, timeZone);\n\n  if (!message) {\n    if (!defaultMessage || locale && locale.toLowerCase() !== defaultLocale.toLowerCase()) {\n      // This prevents warnings from littering the console in development\n      // when no `messages` are passed into the <IntlProvider> for the\n      // default locale.\n      onError(new MissingTranslationError(messageDescriptor, locale));\n    }\n\n    if (defaultMessage) {\n      try {\n        var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats);\n        return prepareIntlMessageFormatHtmlOutput(formatter.format(patchedValues), wrapRichTextChunksInFragment);\n      } catch (e) {\n        onError(new MessageFormatError(\"Error formatting default message for: \\\"\" + id + \"\\\", rendering default message verbatim\", locale, messageDescriptor, e));\n        return defaultMessage;\n      }\n    }\n\n    return id;\n  } // We have the translated message\n\n\n  try {\n    var formatter = state.getMessageFormat(message, locale, formats, {\n      formatters: state\n    });\n    return prepareIntlMessageFormatHtmlOutput(formatter.format(patchedValues), wrapRichTextChunksInFragment);\n  } catch (e) {\n    onError(new MessageFormatError(\"Error formatting message: \\\"\" + id + \"\\\", using \" + (defaultMessage ? 'default message' : 'id') + \" as fallback.\", locale, messageDescriptor, e));\n  }\n\n  if (defaultMessage) {\n    try {\n      var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats);\n      return prepareIntlMessageFormatHtmlOutput(formatter.format(patchedValues), wrapRichTextChunksInFragment);\n    } catch (e) {\n      onError(new MessageFormatError(\"Error formatting the default message for: \\\"\" + id + \"\\\", rendering message verbatim\", locale, messageDescriptor, e));\n    }\n  }\n\n  return message || defaultMessage || id;\n}","map":{"version":3,"sources":["D:/MyDesktop/lab8/node_modules/react-intl/lib/src/formatters/message.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__spreadArrays","il","r","Array","k","a","j","jl","React","invariant","assignUniqueKeysToParts","IntlMessageFormat","isFormatXMLElementFn","MissingTranslationError","MessageFormatError","setTimeZoneInOptions","opts","timeZone","keys","reduce","all","deepMergeOptions","opts1","opts2","deepMergeFormatsAndSetTimeZone","f1","mfFormats","formats","date","time","assignUniqueKeysToFormatXMLElementFnArgument","values","acc","v","prepareIntlMessageFormatHtmlOutput","chunks","shouldWrap","isArray","createElement","Fragment","formatMessage","_a","state","messageDescriptor","locale","messages","defaultLocale","defaultFormats","onError","wrapRichTextChunksInFragment","id","defaultMessage","message","String","replace","patchedValues","toLowerCase","formatter","getMessageFormat","format","e","formatters"],"mappings":"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","sourcesContent":["/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nimport * as React from 'react';\nimport { invariant } from '@formatjs/intl-utils';\nimport { assignUniqueKeysToParts } from '../utils';\nimport IntlMessageFormat, { isFormatXMLElementFn, } from 'intl-messageformat';\nimport { MissingTranslationError, MessageFormatError } from '../error';\nfunction setTimeZoneInOptions(opts, timeZone) {\n    return Object.keys(opts).reduce(function (all, k) {\n        all[k] = __assign({ timeZone: timeZone }, opts[k]);\n        return all;\n    }, {});\n}\nfunction deepMergeOptions(opts1, opts2) {\n    var keys = Object.keys(__assign(__assign({}, opts1), opts2));\n    return keys.reduce(function (all, k) {\n        all[k] = __assign(__assign({}, (opts1[k] || {})), (opts2[k] || {}));\n        return all;\n    }, {});\n}\nfunction deepMergeFormatsAndSetTimeZone(f1, timeZone) {\n    if (!timeZone) {\n        return f1;\n    }\n    var mfFormats = IntlMessageFormat.formats;\n    return __assign(__assign(__assign({}, mfFormats), f1), { date: deepMergeOptions(setTimeZoneInOptions(mfFormats.date, timeZone), setTimeZoneInOptions(f1.date || {}, timeZone)), time: deepMergeOptions(setTimeZoneInOptions(mfFormats.time, timeZone), setTimeZoneInOptions(f1.time || {}, timeZone)) });\n}\nexport function assignUniqueKeysToFormatXMLElementFnArgument(values) {\n    return Object.keys(values).reduce(function (acc, k) {\n        var v = values[k];\n        acc[k] = isFormatXMLElementFn(v)\n            ? assignUniqueKeysToParts(v)\n            : v;\n        return acc;\n    }, {});\n}\nfunction prepareIntlMessageFormatHtmlOutput(chunks, shouldWrap) {\n    return Array.isArray(chunks) && shouldWrap\n        ? React.createElement.apply(React, __spreadArrays([React.Fragment, null], chunks)) : chunks;\n}\nexport function formatMessage(_a, state, messageDescriptor, values) {\n    var locale = _a.locale, formats = _a.formats, messages = _a.messages, defaultLocale = _a.defaultLocale, defaultFormats = _a.defaultFormats, onError = _a.onError, timeZone = _a.timeZone, wrapRichTextChunksInFragment = _a.wrapRichTextChunksInFragment;\n    if (messageDescriptor === void 0) { messageDescriptor = { id: '' }; }\n    var id = messageDescriptor.id, defaultMessage = messageDescriptor.defaultMessage;\n    // `id` is a required field of a Message Descriptor.\n    invariant(!!id, '[React Intl] An `id` must be provided to format a message.');\n    var message = messages && messages[String(id)];\n    // IMPORTANT: Hot path straight lookup for performance\n    if (!values && message && typeof message === 'string') {\n        return message.replace(/'\\{(.*?)\\}'/gi, \"{$1}\");\n    }\n    var patchedValues = values && assignUniqueKeysToFormatXMLElementFnArgument(values);\n    formats = deepMergeFormatsAndSetTimeZone(formats, timeZone);\n    defaultFormats = deepMergeFormatsAndSetTimeZone(defaultFormats, timeZone);\n    if (!message) {\n        if (!defaultMessage ||\n            (locale && locale.toLowerCase() !== defaultLocale.toLowerCase())) {\n            // This prevents warnings from littering the console in development\n            // when no `messages` are passed into the <IntlProvider> for the\n            // default locale.\n            onError(new MissingTranslationError(messageDescriptor, locale));\n        }\n        if (defaultMessage) {\n            try {\n                var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats);\n                return prepareIntlMessageFormatHtmlOutput(formatter.format(patchedValues), wrapRichTextChunksInFragment);\n            }\n            catch (e) {\n                onError(new MessageFormatError(\"Error formatting default message for: \\\"\" + id + \"\\\", rendering default message verbatim\", locale, messageDescriptor, e));\n                return defaultMessage;\n            }\n        }\n        return id;\n    }\n    // We have the translated message\n    try {\n        var formatter = state.getMessageFormat(message, locale, formats, {\n            formatters: state,\n        });\n        return prepareIntlMessageFormatHtmlOutput(formatter.format(patchedValues), wrapRichTextChunksInFragment);\n    }\n    catch (e) {\n        onError(new MessageFormatError(\"Error formatting message: \\\"\" + id + \"\\\", using \" + (defaultMessage ? 'default message' : 'id') + \" as fallback.\", locale, messageDescriptor, e));\n    }\n    if (defaultMessage) {\n        try {\n            var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats);\n            return prepareIntlMessageFormatHtmlOutput(formatter.format(patchedValues), wrapRichTextChunksInFragment);\n        }\n        catch (e) {\n            onError(new MessageFormatError(\"Error formatting the default message for: \\\"\" + id + \"\\\", rendering message verbatim\", locale, messageDescriptor, e));\n        }\n    }\n    return message || defaultMessage || id;\n}\n"]},"metadata":{},"sourceType":"module"}